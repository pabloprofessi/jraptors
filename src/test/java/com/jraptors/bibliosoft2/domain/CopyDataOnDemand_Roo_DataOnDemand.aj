// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jraptors.bibliosoft2.domain;

import com.jraptors.bibliosoft2.domain.Copy;
import com.jraptors.bibliosoft2.domain.CopyDataOnDemand;
import com.jraptors.bibliosoft2.domain.PersonDataOnDemand;
import com.jraptors.bibliosoft2.domain.PlacementDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CopyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CopyDataOnDemand: @Component;
    
    private Random CopyDataOnDemand.rnd = new SecureRandom();
    
    private List<Copy> CopyDataOnDemand.data;
    
    @Autowired
    PersonDataOnDemand CopyDataOnDemand.personDataOnDemand;
    
    @Autowired
    PlacementDataOnDemand CopyDataOnDemand.placementDataOnDemand;
    
    public Copy CopyDataOnDemand.getNewTransientCopy(int index) {
        Copy obj = new Copy();
        setComment(obj, index);
        setCreationdate(obj, index);
        setDeletiondate(obj, index);
        setEditionyear(obj, index);
        setPhysicalstate(obj, index);
        return obj;
    }
    
    public void CopyDataOnDemand.setComment(Copy obj, int index) {
        String comment = "comment_" + index;
        obj.setComment(comment);
    }
    
    public void CopyDataOnDemand.setCreationdate(Copy obj, int index) {
        String creationdate = "creationdate_" + index;
        obj.setCreationdate(creationdate);
    }
    
    public void CopyDataOnDemand.setDeletiondate(Copy obj, int index) {
        String deletiondate = "deletiondate_" + index;
        obj.setDeletiondate(deletiondate);
    }
    
    public void CopyDataOnDemand.setEditionyear(Copy obj, int index) {
        String editionyear = "editionyear_" + index;
        obj.setEditionyear(editionyear);
    }
    
    public void CopyDataOnDemand.setPhysicalstate(Copy obj, int index) {
        String physicalstate = "physicalstate_" + index;
        obj.setPhysicalstate(physicalstate);
    }
    
    public Copy CopyDataOnDemand.getSpecificCopy(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Copy obj = data.get(index);
        Long id = obj.getId();
        return Copy.findCopy(id);
    }
    
    public Copy CopyDataOnDemand.getRandomCopy() {
        init();
        Copy obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Copy.findCopy(id);
    }
    
    public boolean CopyDataOnDemand.modifyCopy(Copy obj) {
        return false;
    }
    
    public void CopyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Copy.findCopyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Copy' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Copy>();
        for (int i = 0; i < 10; i++) {
            Copy obj = getNewTransientCopy(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
