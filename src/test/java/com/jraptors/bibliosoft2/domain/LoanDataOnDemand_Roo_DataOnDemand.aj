// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jraptors.bibliosoft2.domain;

import com.jraptors.bibliosoft2.domain.CopyDataOnDemand;
import com.jraptors.bibliosoft2.domain.Loan;
import com.jraptors.bibliosoft2.domain.LoanDataOnDemand;
import com.jraptors.bibliosoft2.domain.PersonDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LoanDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LoanDataOnDemand: @Component;
    
    private Random LoanDataOnDemand.rnd = new SecureRandom();
    
    private List<Loan> LoanDataOnDemand.data;
    
    @Autowired
    PersonDataOnDemand LoanDataOnDemand.personDataOnDemand;
    
    @Autowired
    CopyDataOnDemand LoanDataOnDemand.copyDataOnDemand;
    
    public Loan LoanDataOnDemand.getNewTransientLoan(int index) {
        Loan obj = new Loan();
        setActualreturndate(obj, index);
        setComments(obj, index);
        setLoandate(obj, index);
        setLoantype(obj, index);
        setReturnstate(obj, index);
        return obj;
    }
    
    public void LoanDataOnDemand.setActualreturndate(Loan obj, int index) {
        String actualreturndate = "actualreturndate_" + index;
        obj.setActualreturndate(actualreturndate);
    }
    
    public void LoanDataOnDemand.setComments(Loan obj, int index) {
        String comments = "comments_" + index;
        obj.setComments(comments);
    }
    
    public void LoanDataOnDemand.setLoandate(Loan obj, int index) {
        String loandate = "loandate_" + index;
        obj.setLoandate(loandate);
    }
    
    public void LoanDataOnDemand.setLoantype(Loan obj, int index) {
        String loantype = "loantype_" + index;
        obj.setLoantype(loantype);
    }
    
    public void LoanDataOnDemand.setReturnstate(Loan obj, int index) {
        String returnstate = "returnstate_" + index;
        obj.setReturnstate(returnstate);
    }
    
    public Loan LoanDataOnDemand.getSpecificLoan(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Loan obj = data.get(index);
        Long id = obj.getId();
        return Loan.findLoan(id);
    }
    
    public Loan LoanDataOnDemand.getRandomLoan() {
        init();
        Loan obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Loan.findLoan(id);
    }
    
    public boolean LoanDataOnDemand.modifyLoan(Loan obj) {
        return false;
    }
    
    public void LoanDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Loan.findLoanEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Loan' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Loan>();
        for (int i = 0; i < 10; i++) {
            Loan obj = getNewTransientLoan(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
