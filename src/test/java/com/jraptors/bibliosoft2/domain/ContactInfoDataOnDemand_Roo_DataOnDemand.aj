// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jraptors.bibliosoft2.domain;

import com.jraptors.bibliosoft2.domain.ContactInfo;
import com.jraptors.bibliosoft2.domain.ContactInfoDataOnDemand;
import com.jraptors.bibliosoft2.domain.LocationDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ContactInfoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ContactInfoDataOnDemand: @Component;
    
    private Random ContactInfoDataOnDemand.rnd = new SecureRandom();
    
    private List<ContactInfo> ContactInfoDataOnDemand.data;
    
    @Autowired
    LocationDataOnDemand ContactInfoDataOnDemand.locationDataOnDemand;
    
    public ContactInfo ContactInfoDataOnDemand.getNewTransientContactInfo(int index) {
        ContactInfo obj = new ContactInfo();
        setAditionalinfo(obj, index);
        setAdressnumber(obj, index);
        setAdressstreet(obj, index);
        setCelphone(obj, index);
        setEmail(obj, index);
        setFloor(obj, index);
        setFloornumber(obj, index);
        setPhone(obj, index);
        return obj;
    }
    
    public void ContactInfoDataOnDemand.setAditionalinfo(ContactInfo obj, int index) {
        String aditionalinfo = "aditionalinfo_" + index;
        obj.setAditionalinfo(aditionalinfo);
    }
    
    public void ContactInfoDataOnDemand.setAdressnumber(ContactInfo obj, int index) {
        String adressnumber = "adressnumber_" + index;
        obj.setAdressnumber(adressnumber);
    }
    
    public void ContactInfoDataOnDemand.setAdressstreet(ContactInfo obj, int index) {
        String adressstreet = "adressstreet_" + index;
        obj.setAdressstreet(adressstreet);
    }
    
    public void ContactInfoDataOnDemand.setCelphone(ContactInfo obj, int index) {
        String celphone = "celphone_" + index;
        obj.setCelphone(celphone);
    }
    
    public void ContactInfoDataOnDemand.setEmail(ContactInfo obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void ContactInfoDataOnDemand.setFloor(ContactInfo obj, int index) {
        String floor = "floor_" + index;
        obj.setFloor(floor);
    }
    
    public void ContactInfoDataOnDemand.setFloornumber(ContactInfo obj, int index) {
        String floornumber = "floornumber_" + index;
        obj.setFloornumber(floornumber);
    }
    
    public void ContactInfoDataOnDemand.setPhone(ContactInfo obj, int index) {
        String phone = "phone_" + index;
        obj.setPhone(phone);
    }
    
    public ContactInfo ContactInfoDataOnDemand.getSpecificContactInfo(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ContactInfo obj = data.get(index);
        Long id = obj.getId();
        return ContactInfo.findContactInfo(id);
    }
    
    public ContactInfo ContactInfoDataOnDemand.getRandomContactInfo() {
        init();
        ContactInfo obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ContactInfo.findContactInfo(id);
    }
    
    public boolean ContactInfoDataOnDemand.modifyContactInfo(ContactInfo obj) {
        return false;
    }
    
    public void ContactInfoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ContactInfo.findContactInfoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ContactInfo' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ContactInfo>();
        for (int i = 0; i < 10; i++) {
            ContactInfo obj = getNewTransientContactInfo(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
