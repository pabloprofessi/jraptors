// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jraptors.bibliosoft2.domain;

import com.jraptors.bibliosoft2.domain.ContactInfoDataOnDemand;
import com.jraptors.bibliosoft2.domain.Person;
import com.jraptors.bibliosoft2.domain.PersonDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PersonDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersonDataOnDemand: @Component;
    
    private Random PersonDataOnDemand.rnd = new SecureRandom();
    
    private List<Person> PersonDataOnDemand.data;
    
    @Autowired
    ContactInfoDataOnDemand PersonDataOnDemand.contactInfoDataOnDemand;
    
    public Person PersonDataOnDemand.getNewTransientPerson(int index) {
        Person obj = new Person();
        setAditionalinfo(obj, index);
        setCreationdate(obj, index);
        setCuil(obj, index);
        setDni(obj, index);
        setFirstname(obj, index);
        setLastname(obj, index);
        setLibraryrole(obj, index);
        setLibrarystate(obj, index);
        setPasswordkey(obj, index);
        setReincorporationdate(obj, index);
        setReputation(obj, index);
        setSuspenddate(obj, index);
        setSuspendreason(obj, index);
        setUsernm(obj, index);
        return obj;
    }
    
    public void PersonDataOnDemand.setAditionalinfo(Person obj, int index) {
        String aditionalinfo = "aditionalinfo_" + index;
        obj.setAditionalinfo(aditionalinfo);
    }
    
    public void PersonDataOnDemand.setCreationdate(Person obj, int index) {
        Date creationdate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreationdate(creationdate);
    }
    
    public void PersonDataOnDemand.setCuil(Person obj, int index) {
        String cuil = "cuil_" + index;
        obj.setCuil(cuil);
    }
    
    public void PersonDataOnDemand.setDni(Person obj, int index) {
        String dni = "dni_" + index;
        obj.setDni(dni);
    }
    
    public void PersonDataOnDemand.setFirstname(Person obj, int index) {
        String firstname = "firstname_" + index;
        obj.setFirstname(firstname);
    }
    
    public void PersonDataOnDemand.setLastname(Person obj, int index) {
        String lastname = "lastname_" + index;
        obj.setLastname(lastname);
    }
    
    public void PersonDataOnDemand.setLibraryrole(Person obj, int index) {
        String libraryrole = "libraryrole_" + index;
        obj.setLibraryrole(libraryrole);
    }
    
    public void PersonDataOnDemand.setLibrarystate(Person obj, int index) {
        String librarystate = "librarystate_" + index;
        obj.setLibrarystate(librarystate);
    }
    
    public void PersonDataOnDemand.setPasswordkey(Person obj, int index) {
        String passwordkey = "passwordkey_" + index;
        obj.setPasswordkey(passwordkey);
    }
    
    public void PersonDataOnDemand.setReincorporationdate(Person obj, int index) {
        Date reincorporationdate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setReincorporationdate(reincorporationdate);
    }
    
    public void PersonDataOnDemand.setReputation(Person obj, int index) {
        String reputation = "reputation_" + index;
        obj.setReputation(reputation);
    }
    
    public void PersonDataOnDemand.setSuspenddate(Person obj, int index) {
        Date suspenddate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSuspenddate(suspenddate);
    }
    
    public void PersonDataOnDemand.setSuspendreason(Person obj, int index) {
        Date suspendreason = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSuspendreason(suspendreason);
    }
    
    public void PersonDataOnDemand.setUsernm(Person obj, int index) {
        String usernm = "usernm_" + index;
        obj.setUsernm(usernm);
    }
    
    public Person PersonDataOnDemand.getSpecificPerson(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Person obj = data.get(index);
        Long id = obj.getId();
        return Person.findPerson(id);
    }
    
    public Person PersonDataOnDemand.getRandomPerson() {
        init();
        Person obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Person.findPerson(id);
    }
    
    public boolean PersonDataOnDemand.modifyPerson(Person obj) {
        return false;
    }
    
    public void PersonDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Person.findPersonEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Person' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Person>();
        for (int i = 0; i < 10; i++) {
            Person obj = getNewTransientPerson(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
